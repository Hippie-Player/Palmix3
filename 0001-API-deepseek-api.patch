From 3aaef357924b2568fb911851a4d2d474077bbdfc Mon Sep 17 00:00:00 2001
From: zyclovelife <zyclovelife@github.com>
Date: Tue, 10 Jun 2025 17:46:05 +0800
Subject: [PATCH] =?UTF-8?q?=E4=BF=AE=E5=A4=8DAPI=E8=B7=AF=E7=94=B1?=
 =?UTF-8?q?=E5=92=8Cdeepseek-api=E6=A8=A1=E5=9D=97?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 app/api/generate-recipe/route.ts |  13 ++--
 lib/deepseek-api.ts              | 126 ++++++++++++++++++++++++++++++-
 2 files changed, 131 insertions(+), 8 deletions(-)

diff --git a/app/api/generate-recipe/route.ts b/app/api/generate-recipe/route.ts
index 00e71ab..459a133 100644
--- a/app/api/generate-recipe/route.ts
+++ b/app/api/generate-recipe/route.ts
@@ -12,14 +12,13 @@ export async function POST(request: Request) {
       );
     }
 
-    // 添加调试日志
-    console.log('API Key:', process.env.OPENROUTER_API_KEY ? '已设置' : '未设置');
-    console.log('Site URL:', process.env.SITE_URL);
-    console.log('Site Name:', process.env.SITE_NAME);
-
-    if (!process.env.OPENROUTER_API_KEY) {
+    // 检查是否有任何API密钥可用
+    const hasApiKey = process.env.OPENAI_API_KEY || process.env.DEEPSEEK_API_KEY || process.env.OPENROUTER_API_KEY;
+    
+    if (!hasApiKey) {
+      console.error('没有配置API密钥 - 需要OPENAI_API_KEY, DEEPSEEK_API_KEY或OPENROUTER_API_KEY之一');
       return NextResponse.json(
-        { error: 'API 密钥未配置' },
+        { error: 'API密钥未配置，无法生成配方' },
         { status: 500 }
       );
     }
diff --git a/lib/deepseek-api.ts b/lib/deepseek-api.ts
index 58eb822..ae872f9 100644
--- a/lib/deepseek-api.ts
+++ b/lib/deepseek-api.ts
@@ -13,7 +13,7 @@ interface RecipeResponse {
 
 // Initialize OpenAI client
 const client = new OpenAI({
-  apiKey: process.env.DEEPSEEK_API_KEY,
+  apiKey: process.env.OPENAI_API_KEY || process.env.DEEPSEEK_API_KEY,
 });
 
 // Define function to generate beverage recipe
@@ -74,6 +74,130 @@ export async function generateRecipe(
   }
 }
 
+// 导出generateBeverageRecipe函数，在route.ts中使用
+export async function generateBeverageRecipe(
+  preferences: string,
+  availableIngredients: string[] = []
+): Promise<any> {
+  try {
+    // 使用默认的gpt-3.5-turbo模型
+    const response = await client.chat.completions.create({
+      model: "gpt-3.5-turbo",
+      messages: [
+        {
+          role: "system",
+          content: "你是一位专业调酒师，擅长创造独特美味的饮品。"
+        },
+        {
+          role: "user",
+          content: `请根据以下信息生成一个饮品配方:
+          偏好: ${preferences}
+          可用原料: ${availableIngredients.join(', ') || '任意常见原料'}
+          
+          请提供以下信息:
+          1. 饮品名称
+          2. 所需原料和份量
+          3. 制作步骤
+          4. 口感描述
+          5. 难度级别 (简单/中等/困难)
+          6. 制作时间 (分钟)`
+        }
+      ],
+      temperature: 0.7,
+      max_tokens: 800
+    });
+
+    const content = response.choices[0].message.content;
+    if (!content) {
+      throw new Error("AI未返回响应");
+    }
+
+    // 将文本响应解析为结构化数据
+    const recipeData = parseRecipeText(content);
+    return recipeData;
+  } catch (error) {
+    console.error('生成配方时出错:', error);
+    throw error;
+  }
+}
+
+// 解析AI返回的文本为结构化数据
+function parseRecipeText(text: string): any {
+  const lines = text.split('\n').filter(line => line.trim());
+  
+  // 尝试提取饮品名称（通常是第一行）
+  const name = lines[0]?.replace(/^[0-9]\.\s*|饮品名称[：:]\s*/i, '').trim() || '创意饮品';
+  
+  // 提取原料（通常在"原料"或"所需原料"之后）
+  let ingredients: string[] = [];
+  let steps: string[] = [];
+  let description = '';
+  let difficulty = '中等';
+  let prepTime = 5;
+  
+  // 查找关键部分
+  let currentSection = '';
+  for (const line of lines) {
+    const trimmedLine = line.trim();
+    
+    if (/原料|配料|所需原料|ingredients/i.test(trimmedLine)) {
+      currentSection = 'ingredients';
+      continue;
+    } else if (/步骤|制作步骤|做法|preparation|steps/i.test(trimmedLine)) {
+      currentSection = 'steps';
+      continue;
+    } else if (/口感|描述|taste|description/i.test(trimmedLine)) {
+      currentSection = 'description';
+      continue;
+    } else if (/难度|difficulty/i.test(trimmedLine)) {
+      const difficultyMatch = trimmedLine.match(/(简单|容易|easy|中等|medium|困难|hard)/i);
+      if (difficultyMatch) {
+        const difficultyText = difficultyMatch[1].toLowerCase();
+        if (/简单|容易|easy/.test(difficultyText)) difficulty = '简单';
+        else if (/困难|hard/.test(difficultyText)) difficulty = '困难';
+        else difficulty = '中等';
+      }
+      currentSection = '';
+      continue;
+    } else if (/时间|time/i.test(trimmedLine)) {
+      const timeMatch = trimmedLine.match(/(\d+)/);
+      if (timeMatch) {
+        prepTime = parseInt(timeMatch[1]);
+      }
+      currentSection = '';
+      continue;
+    }
+    
+    // 根据当前部分添加内容
+    if (currentSection === 'ingredients' && !trimmedLine.match(/^\d+\./)) {
+      ingredients.push(trimmedLine);
+    } else if (currentSection === 'steps' && trimmedLine) {
+      steps.push(trimmedLine.replace(/^\d+\.?\s*/, ''));
+    } else if (currentSection === 'description' && trimmedLine) {
+      description += trimmedLine + ' ';
+    }
+  }
+  
+  // 如果未能正确解析，提供默认值
+  if (ingredients.length === 0) {
+    // 尝试通过行号解析
+    ingredients = lines.slice(1, 5).map(line => line.replace(/^\d+\.?\s*/, ''));
+  }
+  
+  if (steps.length === 0) {
+    steps = lines.slice(5, 10).map(line => line.replace(/^\d+\.?\s*/, ''));
+  }
+  
+  return {
+    name,
+    ingredients,
+    steps,
+    description: description.trim(),
+    difficulty,
+    prepTime
+  };
+}
+
 // 定义解析 AI 响应的函数
 export function parseRecipeResponse(response: RecipeResponse) {
   const content = response.description;
-- 
2.39.5 (Apple Git-154)

